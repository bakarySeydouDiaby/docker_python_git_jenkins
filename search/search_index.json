{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs : For full documentation visit mkdocs.org . repertoire de travil : /mnt/c/Users/Utilisateur/Desktop/bak_projet/3_python/2_mkdocs Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org . repertoire de travil : /mnt/c/Users/Utilisateur/Desktop/bak_projet/3_python/2_mkdocs","title":"Welcome to MkDocs :"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"<link crossorigin=\"anonymous\" media=\"all\" integrity=\"sha512-jZzzGH5Wt7IVFAUCU/nJsbtyEt1mWb11cvXjc+68UreTfFldpRbg+wPPEbnhyiXeL1Q7QBD7aifcLBXqNkaD1g==\" rel=\"stylesheet\" href=\"https://github.githubassets.com/assets/behaviors-8d9cf3187e56b7b21514050253f9c9b1.css\" /> <link crossorigin=\"anonymous\" media=\"all\" integrity=\"sha512-gFyYfx/3EqAWGRRQLJTTi+T8ioN+qdAzlD9CUflYlcQ6b25awyXL9bRNCxgzqYRHVAu2WtoT5fRf9x+QiMhRWg==\" rel=\"stylesheet\" href=\"https://github.githubassets.com/assets/github-805c987f1ff712a0161914502c94d38b.css\" /> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-TZkPQbHzKQlwW+kxvQa2+1+hzGJL1lEex6ZBgQWxichlceemjfbcbmDI4XwPdks5WtONvehmrLsDlAmHhAjgWg==\" type=\"application/javascript\" src=\"https://github.githubassets.com/assets/chunk-frameworks-4d990f41.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-tnwEQVx3bFE+l1zTlAqGzN7AU0FENRv0o4NUl8HqIPqTt8NRaBBE+p24tf4fByTFi3pRLOmzgHZqkDX8CYibag==\" type=\"application/javascript\" src=\"https://github.githubassets.com/assets/chunk-vendor-b67c0441.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-v+hxrr/7LrDH9DTy8tzqdDqKoXOnyWGr12dO4VTOYorMfADgcOjIRDVoy0RyTsLIj5gKzBTOpiFDwkze7/n8Iw==\" type=\"application/javascript\" data-module-id=\"./chunk-access-groups.js\" data-src=\"https://github.githubassets.com/assets/chunk-access-groups-bfe871ae.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-BUDbrXZbK9QorUrf0KoEbZAJhTnz+BqMm10bqZCK6w5Hwy7YaORQ4F4DXhLkAVTvaJhNhxxeXgmgJLP0TB7TOw==\" type=\"application/javascript\" data-module-id=\"./chunk-advanced.js\" data-src=\"https://github.githubassets.com/assets/chunk-advanced-0540dbad.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-5tWKSr7mhAzSh4Sx5YRFgKftdGxKwHKnOGYw5DlxjHhkQVURYFU3Bk5IMOGMKuAiJTlC3OXYM3xzGcyjzuEFQQ==\" type=\"application/javascript\" data-module-id=\"./chunk-animate-on-scroll.js\" data-src=\"https://github.githubassets.com/assets/chunk-animate-on-scroll-e6d58a4a.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-ct3QiK2mvpg7zor9R2psdWnNMM2K32RU4RGRB/7yA5FyZ8H4iY6SNynXc7UaJqzBx6NaReg3GsWJPwW3kgAAig==\" type=\"application/javascript\" data-module-id=\"./chunk-codemirror.js\" data-src=\"https://github.githubassets.com/assets/chunk-codemirror-72ddd088.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-M6W/sGLOuJXCIkw+doDl6zl7J9q2DmqdwftQCtyEiZM/UJNGRVQdyKwI/PAMxD12se/wCx3ZcyJs9nz0o0OSVw==\" type=\"application/javascript\" data-module-id=\"./chunk-color-modes.js\" data-src=\"https://github.githubassets.com/assets/chunk-color-modes-33a5bfb0.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-71HZu1T5JWqRNF9wrm2NXZAqYVvzxZ8Dvor5U5l/LuEBbGCBX57Sny60Rj+qUZZAvEBGFlNsz179DEn2HFwgVA==\" type=\"application/javascript\" data-module-id=\"./chunk-confetti.js\" data-src=\"https://github.githubassets.com/assets/chunk-confetti-ef51d9bb.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-P29U0lNmhUj353VrCWp6czdhNpMtF70xVKf4GBGFVKCoqGtxp0sywAM8/46+iC0kdFiRvM13EBvDnq6oyWRwiw==\" type=\"application/javascript\" data-module-id=\"./chunk-contributions-spider-graph.js\" data-src=\"https://github.githubassets.com/assets/chunk-contributions-spider-graph-3f6f54d2.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-arflMFcVzVAYaP2n7m7gklPChWsVsCDtRPav2Cb6bqLeJf8pgbojWJ3EseKXILCIqfxl/v6arBduZ9SLmpMEZw==\" type=\"application/javascript\" data-module-id=\"./chunk-delayed-loading-element.js\" data-src=\"https://github.githubassets.com/assets/chunk-delayed-loading-element-6ab7e530.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-6j/oSF+kbW+yetNPvI684VzAu9pzug6Vj2h+3u1LdCuRhR4jnuiHZfeQKls3nxcT/S3H+oIt7FtigE/aeoj+gg==\" type=\"application/javascript\" data-module-id=\"./chunk-drag-drop.js\" data-src=\"https://github.githubassets.com/assets/chunk-drag-drop-ea3fe848.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-VSSd+Yzi2iMS+pibY6hD/WdypxAEdob5F2RMKxuKcAHS2EpFYJPeTXoVxt0NXg03tfj2dka2mEtHS+vjpYSaDw==\" type=\"application/javascript\" data-module-id=\"./chunk-edit-hook-secret-element.js\" data-src=\"https://github.githubassets.com/assets/chunk-edit-hook-secret-element-55249df9.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-o98K7rYxxlUmQd7Y9Ckhc0akYwzL4lnMmiukRXrXuQUOuAaM/BuYRddD9a0oTZ052Y70W2Up4qMjeAsHLmRlKQ==\" type=\"application/javascript\" data-module-id=\"./chunk-edit.js\" data-src=\"https://github.githubassets.com/assets/chunk-edit-a3df0aee.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-aiqMIGGZGo8AQMjcoImKPMTsZVVRl6htCSY7BpRmpGPG/AF+Wq+P/Oj/dthWQOIk9cCNMPEas7O2zAR6oqn0tA==\" type=\"application/javascript\" data-module-id=\"./chunk-emoji-picker-element.js\" data-src=\"https://github.githubassets.com/assets/chunk-emoji-picker-element-6a2a8c20.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-qLW31c09tXeAXxFkISV7WTgrXi552Amv8JhqE1RW+1GfK8hAmuU/E24Ao/EcCpuXL5SN2c6LSAYNDAtOUsw53g==\" type=\"application/javascript\" data-module-id=\"./chunk-failbot.js\" data-src=\"https://github.githubassets.com/assets/chunk-failbot-a8b5b7d5.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-KL6m1NSbDmR2ZjIqfK40Ayi9zjPHFzYFCa8r5ijNdaCT9NlbcwaPEnOFsyvPK8eYX7aYkL8f8b8zg6WjFM0dWw==\" type=\"application/javascript\" data-module-id=\"./chunk-feature-callout-element.js\" data-src=\"https://github.githubassets.com/assets/chunk-feature-callout-element-28bea6d4.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-h8LRqLfdvdK2/kSKj8JYy6jyBdlTywxL4lqwV6OVOd3SCPRgUJ4/r3KHFQZPuYw0G7AWWhJY/IoitYLvAWFe5Q==\" type=\"application/javascript\" data-module-id=\"./chunk-filter-input.js\" data-src=\"https://github.githubassets.com/assets/chunk-filter-input-87c2d1a8.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-ZDEs2KxFQg2a+jrEHbGKTNtzB+AQK3msBhv/KXLFiX9sV8vJaa9+9lpIW/kWd9JKtpJ63vTC/wuOJo7QJTbKKg==\" type=\"application/javascript\" data-module-id=\"./chunk-get-repo-element.js\" data-src=\"https://github.githubassets.com/assets/chunk-get-repo-element-64312cd8.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-Z1wcyOFQHzyMSPqp5DLKrobr3DN2Q6Dz31cfPtw4b2vPs9PX0PrxyDXHpTbIlcZ9qT1M1BNAypHKKw8Lp6Yx/Q==\" type=\"application/javascript\" data-module-id=\"./chunk-insights-graph.js\" data-src=\"https://github.githubassets.com/assets/chunk-insights-graph-675c1cc8.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-hDiTAZNldjiUNPk5eNthz6zUVY57FFqFU+n2D7WRYygzCxbDtwO9ODKDsEXxYb8kAMI7gTC8/QR3dXtHVCVgcA==\" type=\"application/javascript\" data-module-id=\"./chunk-insights-query.js\" data-src=\"https://github.githubassets.com/assets/chunk-insights-query-84389301.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-lmosGyye+/xONUQs9SwGN/a9fQvUSiAFk5HrL8eLHjeuOx9DX9TW5ckRKFD+6FM54vutFf/mBmNFW/0R3KJEBw==\" type=\"application/javascript\" data-module-id=\"./chunk-invitations.js\" data-src=\"https://github.githubassets.com/assets/chunk-invitations-966a2c1b.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-4MxGQhsDODvZgLbu5arO6CapfnNvZ5fXMsZ47FiklUKRmHq4B3h8uTokSIWAOAxsvCMRrZr0DVZ0i0gm3RAnsg==\" type=\"application/javascript\" data-module-id=\"./chunk-jump-to.js\" data-src=\"https://github.githubassets.com/assets/chunk-jump-to-e0cc4642.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-VtdawM/OSsu+d6v25ZY6UcQa/GGLAStSESjsqdEwx+ey88GNYGkQ24o+JFFo4lY+7wLMRf7aCrLxkA5SquBoNQ==\" type=\"application/javascript\" data-module-id=\"./chunk-launch-code-element.js\" data-src=\"https://github.githubassets.com/assets/chunk-launch-code-element-56d75ac0.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-RR5Uk+KE9M/CsqLcmgReChS7ZDjm8gxcOnDYWWkMdeTsrpW/xDlJHQEgUfuEC6HJXfyPNcW+oBTHqMnucNYGTQ==\" type=\"application/javascript\" data-module-id=\"./chunk-line-chart.js\" data-src=\"https://github.githubassets.com/assets/chunk-line-chart-451e5493.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-RduaLAviB2ygvRK/eX5iwzYO43ie7svrJ0rYJs06x7XqpRl/IK8PPBscBWM9Moo5Z86DK2iRLE2+aR7TJ5Uc2Q==\" type=\"application/javascript\" data-module-id=\"./chunk-metric-selection-element.js\" data-src=\"https://github.githubassets.com/assets/chunk-metric-selection-element-45db9a2c.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-7hZ031ngiF36wGsfcoyyCWTqwYxjX+qeTLtCV7CJ+IO+wzkzCm1RoR3WzWczfWmwLNqr+Hu3kQOgkBaGn4ntWQ==\" type=\"application/javascript\" data-module-id=\"./chunk-notification-list-focus.js\" data-src=\"https://github.githubassets.com/assets/chunk-notification-list-focus-ee1674df.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-ma0OOy3nj0c1cqBx0BkcmIFsLqcSZ+MIukQxyEFM/OWTzZpG+QMgOoWPAHZz43M6fyjAUG1jH6c/6LPiiKPCyw==\" type=\"application/javascript\" data-module-id=\"./chunk-profile-pins-element.js\" data-src=\"https://github.githubassets.com/assets/chunk-profile-pins-element-99ad0e3b.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-hgoSKLTlL8I3IWr/TLONCU+N4kdCtdrHCrrud4NKhgRlLrTw0XUPhqBaDdZUiFSzDQRw/nFQ1kw2VeTm0g9+lA==\" type=\"application/javascript\" data-module-id=\"./chunk-profile.js\" data-src=\"https://github.githubassets.com/assets/chunk-profile-860a1228.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-W/CGm7ARGkQrOSmTAUvHx6XJH3sPfyUEY2kRDWT84K5WU9i2fNXvLxdipvaaMTQbR6AjSSxrQOBj6lR1kzgB0Q==\" type=\"application/javascript\" data-module-id=\"./chunk-readme-toc-element.js\" data-src=\"https://github.githubassets.com/assets/chunk-readme-toc-element-5bf0869b.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-/Xj0UUoF3jbbyPG8kYIU32SSIcbwjCsMEcrzD8TehuXuB+/GOxxNw9427dwVYGqGkuNvhGi2m5cbSMNZI6BROA==\" type=\"application/javascript\" data-module-id=\"./chunk-ref-selector.js\" data-src=\"https://github.githubassets.com/assets/chunk-ref-selector-fd78f451.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-D/MxBjtRPjes6DvnYGi2dEH7AQEnLvSvTODabEkSo+1zP6SSEZpb8oF52kFWERA97t1L19fF/P3bn4pgIsMPuA==\" type=\"application/javascript\" data-module-id=\"./chunk-responsive-underlinenav.js\" data-src=\"https://github.githubassets.com/assets/chunk-responsive-underlinenav-0ff33106.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-SWy36S28Js+/YzsvYgmp+IEdC0qtMcBf6sYhXTEcj1aFPCLPOTOnOKqzFiNyH2oNVDd+u5Qi8eqYINSIu28LFQ==\" type=\"application/javascript\" data-module-id=\"./chunk-runner-groups.js\" data-src=\"https://github.githubassets.com/assets/chunk-runner-groups-496cb7e9.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-SVdK0K69PnQ4FChdpl650OR+vplYWXqddxNkEGKhQf6tkehqvKkFEg5LQSZgCVKt2tfc9CnWJlmKCwbTTipEjg==\" type=\"application/javascript\" data-module-id=\"./chunk-series-table.js\" data-src=\"https://github.githubassets.com/assets/chunk-series-table-49574ad0.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-tk76eoSLUqXSVZ8ANzPprrOImFIV1zQ/VBV+WzG8ZjZpVPH8cLkMH/ur5HJB1lxx9/yo+V2wjDF96t4qfUwZLA==\" type=\"application/javascript\" data-module-id=\"./chunk-severity-calculator-element.js\" data-src=\"https://github.githubassets.com/assets/chunk-severity-calculator-element-b64efa7a.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-fIq9Mn7jY/bHQXnsmh+VejpDnaO+d/FDxsp+4CuZtdNLrLuO+dQCjh+m6Yd8GCYD2Cy6DWbCEyM+mH2dkB2H9A==\" type=\"application/javascript\" data-module-id=\"./chunk-sortable-behavior.js\" data-src=\"https://github.githubassets.com/assets/chunk-sortable-behavior-7c8abd32.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-nKa3UdA2O7Ve4Jn24gaB20yUfJvS7wlnd8Q8C+iWD8i2tXLgaKemDWkLeexeQdrs+an98FCl5fOiy0J+izn+tQ==\" type=\"application/javascript\" data-module-id=\"./chunk-three.module.js\" data-src=\"https://github.githubassets.com/assets/chunk-three.module-9ca6b751.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-WK8VXw3lfUQ/VRW0zlgKPhcMUqH0uTnB/KzePUPdZhCm/HpxfXXHKTGvj5C0Oex7+zbIM2ECzULbtTCT4ug3yg==\" type=\"application/javascript\" data-module-id=\"./chunk-toast.js\" data-src=\"https://github.githubassets.com/assets/chunk-toast-58af155f.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-luqZ+mADz+7HRHtCUzlzjR5jCslW6cEOqzoa+avLS9Z1t3vX7T0PI34MJ+r7CVglMUUqLwYMN6rA/VORmmmVvQ==\" type=\"application/javascript\" data-module-id=\"./chunk-tweetsodium.js\" data-src=\"https://github.githubassets.com/assets/chunk-tweetsodium-96ea99fa.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-fvcOOYapCxPkDRQWz2WQzrqL6rRhX88yHWF87fb9Xny2Fq4lri0ONaVFL7XDSTiTyu4OTp+8WoyfMVpgGUaaVg==\" type=\"application/javascript\" data-module-id=\"./chunk-unveil.js\" data-src=\"https://github.githubassets.com/assets/chunk-unveil-7ef70e39.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-UOFNW/xcxynplVfC8Y3fQdFFiasmugYUUHU4N90G8sqBZGL1yR37yjVakxV8/FV5deBALx9OQMBoiba/3OHGDA==\" type=\"application/javascript\" data-module-id=\"./chunk-user-status-submit.js\" data-src=\"https://github.githubassets.com/assets/chunk-user-status-submit-50e14d5b.js\"></script> <script crossorigin=\"anonymous\" defer=\"defer\" integrity=\"sha512-cKu/+X7gT+WVH4sXKt0g3G77bfQfcgwurRObM+dt8XylPm9eEWI+/aWKhVab6VsYuvvuI5BTriKXhXfJwaSXdQ==\" type=\"application/javascript\" data-module-id=\"./chunk-webgl-warp.js\" data-src=\"https://github.githubassets.com/assets/chunk-webgl-warp-70abbff9.js\"></script> getting-started/index.md at master \u00b7 docker/getting-started \u00b7 GitHub <meta name=\"hovercard-subject-tag\" content=\"repository:237987374\" data-pjax-transient> <meta name=\"google-site-verification\" content=\"c1kuD-K2HIVF635lypcsWPoD4kilo5-jA_wBFyT4uMY\"> <meta name=\"hostname\" content=\"github.com\"> <meta name=\"user-login\" content=\"\"> <meta name=\"expected-hostname\" content=\"github.com\"> <meta name=\"enabled-features\" content=\"MARKETPLACE_PENDING_INSTALLATIONS\"> <link rel=\"canonical\" href=\"https://github.com/docker/getting-started/blob/master/docs/tutorial/our-application/index.md\" data-pjax-transient> Skip to content Sign up Why GitHub? Features \u2192 Mobile \u2192 Actions \u2192 Codespaces \u2192 Packages \u2192 Security \u2192 Code review \u2192 Issues \u2192 Integrations \u2192 GitHub Sponsors \u2192 Customer stories \u2192 Team Enterprise Explore Explore GitHub \u2192 Learn and contribute Topics \u2192 Collections \u2192 Trending \u2192 Learning Lab \u2192 Open source guides \u2192 Connect with others The ReadME Project \u2192 Events \u2192 Community forum \u2192 GitHub Education \u2192 GitHub Stars program \u2192 Marketplace Pricing Plans \u2192 Compare plans \u2192 Contact Sales \u2192 Education \u2192 In this repository All GitHub \u21b5 Jump to \u21b5 No suggested jump to results In this repository All GitHub \u21b5 Jump to \u21b5 In this organization All GitHub \u21b5 Jump to \u21b5 In this repository All GitHub \u21b5 Jump to \u21b5 Sign in Sign up {{ message }} docker / getting-started Notifications Star 1.2k Fork 2.1k Code Issues 48 Pull requests 37 Actions Projects 0 Wiki Security Insights More Code Issues Pull requests Actions Projects Wiki Security Insights Permalink master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags getting-started / docs / tutorial / our-application / index.md Go to file Go to file T Go to line L Copy path Copy permalink Cannot retrieve contributors at this time Getting our App Building the App's Container Image Starting an App Container Recap 113 lines (78 sloc) 5.04 KB Raw Blame Open with Desktop View raw View blame For the rest of this tutorial, we will be working with a simple todo list manager that is running in Node.js. If you're not familiar with Node.js, don't worry! No real JavaScript experience is needed! At this point, your development team is quite small and you're simply building an app to prove out your MVP (minimum viable product). You want to show how it works and what it's capable of doing without needing to think about how it will work for a large team, multiple developers, etc. {: style=\"width:50%;\" } { .text-center } Getting our App Before we can run the application, we need to get the application source code onto our machine. For real projects, you will typically clone the repo. But, for this tutorial, we have created a ZIP file containing the application. Download the ZIP . Open the ZIP file and make sure you extract the contents. Once extracted, use your favorite code editor to open the project. If you're in need of an editor, you can use Visual Studio Code . You should see the package.json and two subdirectories ( src and spec ). {: style=\"width:650px;margin-top:20px;\"} {: .text-center } Building the App's Container Image In order to build the application, we need to use a Dockerfile . A Dockerfile is simply a text-based script of instructions that is used to create a container image. If you've created Dockerfiles before, you might see a few flaws in the Dockerfile below. But, don't worry! We'll go over them. Create a file named Dockerfile in the same folder as the file package.json with the following contents. FROM node:12-alpine RUN apk add --no-cache python g++ make WORKDIR /app COPY . . RUN yarn install --production CMD [ \"node\" , \"src/index.js\" ] Please check that the file Dockerfile has no file extension like .txt . Some editors may append this file extension automatically and this would result in an error in the next step. If you haven't already done so, open a terminal and go to the app directory with the Dockerfile . Now build the container image using the docker build command. docker build -t getting-started . This command used the Dockerfile to build a new container image. You might have noticed that a lot of \"layers\" were downloaded. This is because we instructed the builder that we wanted to start from the node:12-alpine image. But, since we didn't have that on our machine, that image needed to be downloaded. After the image was downloaded, we copied in our application and used yarn to install our application's dependencies. The CMD directive specifies the default command to run when starting a container from this image. Finally, the -t flag tags our image. Think of this simply as a human-readable name for the final image. Since we named the image getting-started , we can refer to that image when we run a container. The . at the end of the docker build command tells that Docker should look for the Dockerfile in the current directory. Starting an App Container Now that we have an image, let's run the application! To do so, we will use the docker run command (remember that from earlier?). Start your container using the docker run command and specify the name of the image we just created: docker run -dp 3000:3000 getting-started Remember the -d and -p flags? We're running the new container in \"detached\" mode (in the background) and creating a mapping between the host's port 3000 to the container's port 3000. Without the port mapping, we wouldn't be able to access the application. After a few seconds, open your web browser to http://localhost:3000 . You should see our app! {: style=\"width:450px;margin-top:20px;\"} {: .text-center } Go ahead and add an item or two and see that it works as you expect. You can mark items as complete and remove items. Your frontend is successfully storing items in the backend! Pretty quick and easy, huh? At this point, you should have a running todo list manager with a few items, all built by you! Now, let's make a few changes and learn about managing our containers. If you take a quick look at the Docker Dashboard, you should see your two containers running now (this tutorial and your freshly launched app container)! Recap In this short section, we learned the very basics about building a container image and created a Dockerfile to do so. Once we built an image, we started the container and saw the running app! Next, we're going to make a modification to our app and learn how to update our running application with a new image. Along the way, we'll learn a few other useful commands. Go \u00a9 2021 GitHub, Inc. Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can\u2019t perform that action at this time. You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.","title":"About"},{"location":"guide_jenkins_docker_pytest/","text":"Lien : https://medium.com/swlh/build-your-first-automated-test-integration-with-pytest-jenkins-and-docker-ec738ec43955 sujet : Build your first Automated Test Integration with pytest, Jenkins and Docker\\n resume : nous allons d\u00e9velopper une calculatrice simple en Python, \u00e9crire des tests pour celle-ci en utilisant le framework pytest et utiliser un container Jenkins pour r\u00e9cup\u00e9rer le d\u00e9p\u00f4t depuis GitHub et ex\u00e9cuter les tests \u00e0 l'int\u00e9rieur d'un nouveau conteneur Docker lanc\u00e9 par Jenkins. L'ensemble du d\u00e9p\u00f4t est disponible sur : https://github.com/varunkumar032/python-test-calculator Initialistaion Git: bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git$ git init Installation virtualenv : (voir onenote xavki virtualenv) ET pytest bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git$ virtualenv --python /usr/bin/python3 mydev1 source mydev1/bin/activate pour utiliser l'env virtuel mydev1 editer ~/.bash_aliases ==> alias mydev1='source /mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/mydev1/bin/activate' voir doc : https://www.cyberciti.biz/faq/create-permanent-bash-alias-linux-unix/ pip install pytest !!! ctrl+shift+P ::: Python Select interpreter : et mettre le path /mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/mydev1/bin/python3 !!! sinon on ne pourra pas importer pytest qui est dans ce virtualenv !!! pour utiliser les modules et packages, il faut mettre le PYTHONPATH !!! import sys !!! sys.path.append(\"/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/mydev1/lib/python3.8/site-packages\") !!! import pytest pour les 4 tests, on laisse expr\u00e8s faux la multiplication et la soustraction Exemple r\u00e9sultats pytest: (mydev1) bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests$ pytest test_multiplication.py =================================== test session starts ==================================== platform linux -- Python 3.8.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 rootdir: /mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests collected 2 items test_multiplication.py F. [100%] ========================================= FAILURES ========================================= _ _ _ _ _ test multiply _ _ _ _ _ __ def test_multiply(): result = multiply(3, 4) assert result == 10 E assert 12 == 10 test_multiplication.py:15: AssertionError ================================= short test summary info ================================== FAILED test_multiplication.py::test_multiply - assert 12 == 10 =============================== 1 failed, 1 passed in 1.89s ================================ (mydev1) bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests$ pytest test_soustraction.py =================================== test session starts ==================================== platform linux -- Python 3.8.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 rootdir: /mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests collected 3 items test_soustraction.py F.. [100%] ========================================= FAILURES ========================================= _ _ _ _ _ _ test_subtract_positive _ _ _ _ ____ def test_subtract_positive(): result = subtract(4, 3) assert result == 10 E assert 1 == 10 test_soustraction.py:15: AssertionError ================================= short test summary info ================================== FAILED test_soustraction.py::test_subtract_positive - assert 1 == 10 =============================== 1 failed, 2 passed in 1.89s ================================ (mydev1) bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests$ pytest test_division.py =================================== test session starts ==================================== platform linux -- Python 3.8.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 rootdir: /mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests collected 3 items test_division.py ... [100%] ==================================== 3 passed in 0.09s ===================================== voir auusi : (mydev1)) bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/3_python/1_pytest$ Mise en place Git et github git config --get remote.origin.url cat ~/.ssh/id_rsa.pub ==> se connecter sur github et ajouter cette cl\u00e9 git config --list ==> visualise les infos : user, email, url github... un push est fait en suivant (Push to remote github) onenote on ajoute un ficher requirements.txt qu'on push \u00e0 nouveau sur github cd src pip freeze > requirements.txt git status ==> on voit requirements.txt git add src/requirements.txt git commit -m \" add requirements.txt from pip freeze\" git push git status PARTIE Docker =========== Rappel : il faut 2 container , 1 pour le test et l'autre pour lancer jenkins 1_cr\u00e9ation Dockerfile, m\u00eame repertoire que src : container qui execute le test pytest FROM python:3.6-slim COPY . /python-test-calculator WORKDIR /python-test-calculator ==> copie du workspace dans un un nouveau dossier du conteneur qui sera le repertoire de travail RUN pip install --no-cache-dir -r requirements.txt ==> commande d'Installation RUN [\"pytest\", \"-v\", \"--junitxml=reports/result.xml\"] ==> commande execution test pytest en mode verbeux CMD tail -f /dev/null ==> il maintient le conteneur en fonctionnement m\u00eame apr\u00e8s la fin des tests pour pouvoir copier le fichier result.xml du conteneur vers le worspace Jenkins pour qu'il publie le rapport de test. 2_cr\u00e9ation JenkinsDockerfile : container qui fait tourner Jenkins ce dockerfile ne fait que cr\u00e9\u00e9 une image qui fait tourn\u00e9 jenkins et y installe un autre docker, le tout dans un debian !!! -qq ou -qqy sont des options de apt-get : -qq veut dire simplement en mode silencieux et y=yess FROM jenkins/jenkins:lts USER root RUN apt-get update -qq \\ && apt-get install -qqy apt-transport-https ca-certificates \\ curl gnupg2 software-properties-common RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - RUN add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/debian \\ $(lsb_release -cs) stable\" RUN apt-get update -qq && apt-get install docker-ce=17.12.1~ce-0~debian -y creation de l'image nomm\u00e9e : jenkins_docker_image ------------------------------------------------- docker build -t jenkins_docker_image -f JenkinsDockerfile . lancement du container jenkins nomm\u00e9e jenkins_docker_container sur le port 8080 et avec un bind mounts ---------------------------------------------------------- docker run -d --name jenkins_docker_container -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock jenkins_docker_image verification container: ----------------------- docker ps verification du docker install\u00e9 : ------------------------------- bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git$ docker exec -ti jenkins_docker_container docker --version Docker version 17.12.1-ce, build 7390fc6 verification bind mounts: ----------------------- en local : (mydev1) bakary@DESKTOP-337O3J7:ls -l /var/run/ srw-rw---- 1 root docker 0 Aug 5 18:46 docker-cli.sock srw-rw---- 1 root docker 0 Aug 5 18:46 docker.sock dans le container: bakary@DESKTOP-337O3J7: docker exec -ti jenkins_docker_container ls -l /var/run/ srw-rw---- 1 root 1001 0 Aug 5 16:46 docker.sock drwxrwxrwt 2 root root 4096 Jul 21 00:00 lock lancement sur navigateur : -------------------------- Open http://localhost:8080/ copier le pasword obtenu avec : docker exec -ti jenkins_docker_container cat /var/jenkins_home/secrets/initialAdminPassword Installer les plugins sugg\u00e9r\u00e9s Configurer utilisateur : login=bakary mdp=bakary1234 Sauver et terminer l'installation ==> Jenkins fonctionne correctement PARTIE JENKINS : Click on create new jobs to create a new freestyle project of any name : jenkins pytest Under the General tab: ---------------------- mention the project description and specify the GitHub Project URL. In Source Code Management tab: ------------------------------ click on Git and add the repository URL. Enter the credentials by selecting Add->Jenkins and specifying the username and password of Git account. This step will copy the repository docker_python_git_jenkins from GitHub URL into /var/jenkins_home/workspace thereby creating the workspace inside our python-test-calculator directory (rappel Dockerfile COPY . /python-test-calculator \\ WORKDIR /python-test-calculator) Under Build tab: ---------------- click on Add build step->Execute shell and copy the following: IMAGE_NAME=\"test-image\" CONTAINER_NAME=\"test-container\" echo \"Check current working directory\" pwd echo \"Build docker image and run container\" docker build -t $IMAGE_NAME . ===> c'est le Dockerfile copi\u00e9 ici qui est lanc\u00e9 pour creer l'image docker run -d --name $CONTAINER_NAME $IMAGE_NAME ==> lancement container du pytest echo \"Copy result.xml into Jenkins container\" rm -rf reports; mkdir reports docker cp $CONTAINER_NAME:/python_docker_jenkins_git/reports/result.xml reports/ echo \"Cleanup\" docker stop $CONTAINER_NAME docker rm $CONTAINER_NAME docker rmi $IMAGE_NAME Etape pas encore decrite Installation plugins Installation du cli Command Line User Command line folks, download the jenkins-cli.jar file from your Jenkins Server. Syntax: wget $JENKINS_URL/jnlpJars/jenkins-cli.jar ##Example wget http://localhost:8080/jnlpJars/jenkins-cli.jar Get the plugin manager: version=1.0.1 curl \\ -L \\ -X GET \"https://github.com/jenkinsci/plugin-installation-manager-tool/releases/download/plugin-management-parent-pom-$version/jenkins-plugin-manager-$version.jar\" \\ -o jenkins-plugin-manager-$version.jar Download the plugins: java -jar jenkins-plugin-manager-$version.jar \\ --plugin-download-directory pluginsFolder \\ --plugin-file plugins.yml \\ --war jenkins.war The plugins are in the pluginsFolder. commande cli: USER=\"bakary\" PASSWORD=\"bakary1234\" java -jar jenkins-cli.jar -auth ${USER}:${PASSWORD} -s ${JENKINSURL} install-plugin ${PLUGIN_NAME}","title":"Exemple_guide_docker_jenkins_pytest"},{"location":"guide_jenkins_docker_pytest/#lien-httpsmediumcomswlhbuild-your-first-automated-test-integration-with-pytest-jenkins-and-docker-ec738ec43955","text":"","title":"Lien : https://medium.com/swlh/build-your-first-automated-test-integration-with-pytest-jenkins-and-docker-ec738ec43955"},{"location":"guide_jenkins_docker_pytest/#sujet-build-your-first-automated-test-integration-with-pytest-jenkins-and-dockern","text":"","title":"sujet : Build your first Automated Test Integration with pytest, Jenkins and Docker\\n"},{"location":"guide_jenkins_docker_pytest/#resume","text":"nous allons d\u00e9velopper une calculatrice simple en Python, \u00e9crire des tests pour celle-ci en utilisant le framework pytest et utiliser un container Jenkins pour r\u00e9cup\u00e9rer le d\u00e9p\u00f4t depuis GitHub et ex\u00e9cuter les tests \u00e0 l'int\u00e9rieur d'un nouveau conteneur Docker lanc\u00e9 par Jenkins. L'ensemble du d\u00e9p\u00f4t est disponible sur : https://github.com/varunkumar032/python-test-calculator Initialistaion Git: bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git$ git init","title":"resume :"},{"location":"guide_jenkins_docker_pytest/#installation-virtualenv-voir-onenote-xavki-virtualenv-et-pytest","text":"bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git$ virtualenv --python /usr/bin/python3 mydev1 source mydev1/bin/activate pour utiliser l'env virtuel mydev1 editer ~/.bash_aliases ==> alias mydev1='source /mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/mydev1/bin/activate' voir doc : https://www.cyberciti.biz/faq/create-permanent-bash-alias-linux-unix/ pip install pytest !!! ctrl+shift+P ::: Python Select interpreter : et mettre le path /mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/mydev1/bin/python3 !!! sinon on ne pourra pas importer pytest qui est dans ce virtualenv !!! pour utiliser les modules et packages, il faut mettre le PYTHONPATH !!! import sys !!! sys.path.append(\"/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/mydev1/lib/python3.8/site-packages\") !!! import pytest pour les 4 tests, on laisse expr\u00e8s faux la multiplication et la soustraction","title":"Installation virtualenv : (voir onenote xavki virtualenv) ET pytest"},{"location":"guide_jenkins_docker_pytest/#exemple-resultats-pytest","text":"(mydev1) bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests$ pytest test_multiplication.py =================================== test session starts ==================================== platform linux -- Python 3.8.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 rootdir: /mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests collected 2 items test_multiplication.py F. [100%] ========================================= FAILURES ========================================= _ _ _ _ _ test multiply _ _ _ _ _ __ def test_multiply(): result = multiply(3, 4) assert result == 10 E assert 12 == 10 test_multiplication.py:15: AssertionError ================================= short test summary info ================================== FAILED test_multiplication.py::test_multiply - assert 12 == 10 =============================== 1 failed, 1 passed in 1.89s ================================ (mydev1) bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests$ pytest test_soustraction.py =================================== test session starts ==================================== platform linux -- Python 3.8.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 rootdir: /mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests collected 3 items test_soustraction.py F.. [100%] ========================================= FAILURES ========================================= _ _ _ _ _ _ test_subtract_positive _ _ _ _ ____ def test_subtract_positive(): result = subtract(4, 3) assert result == 10 E assert 1 == 10 test_soustraction.py:15: AssertionError ================================= short test summary info ================================== FAILED test_soustraction.py::test_subtract_positive - assert 1 == 10 =============================== 1 failed, 2 passed in 1.89s ================================ (mydev1) bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests$ pytest test_division.py =================================== test session starts ==================================== platform linux -- Python 3.8.5, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 rootdir: /mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git/src/tests collected 3 items test_division.py ... [100%] ==================================== 3 passed in 0.09s ===================================== voir auusi : (mydev1)) bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/3_python/1_pytest$","title":"Exemple r\u00e9sultats pytest:"},{"location":"guide_jenkins_docker_pytest/#mise-en-place-git-et-github","text":"git config --get remote.origin.url cat ~/.ssh/id_rsa.pub ==> se connecter sur github et ajouter cette cl\u00e9 git config --list ==> visualise les infos : user, email, url github... un push est fait en suivant (Push to remote github) onenote on ajoute un ficher requirements.txt qu'on push \u00e0 nouveau sur github cd src pip freeze > requirements.txt git status ==> on voit requirements.txt git add src/requirements.txt git commit -m \" add requirements.txt from pip freeze\" git push git status PARTIE Docker =========== Rappel : il faut 2 container , 1 pour le test et l'autre pour lancer jenkins","title":"Mise en place Git et github"},{"location":"guide_jenkins_docker_pytest/#1_creation-dockerfile-meme-repertoire-que-src-container-qui-execute-le-test-pytest","text":"FROM python:3.6-slim COPY . /python-test-calculator WORKDIR /python-test-calculator ==> copie du workspace dans un un nouveau dossier du conteneur qui sera le repertoire de travail RUN pip install --no-cache-dir -r requirements.txt ==> commande d'Installation RUN [\"pytest\", \"-v\", \"--junitxml=reports/result.xml\"] ==> commande execution test pytest en mode verbeux CMD tail -f /dev/null ==> il maintient le conteneur en fonctionnement m\u00eame apr\u00e8s la fin des tests pour pouvoir copier le fichier result.xml du conteneur vers le worspace Jenkins pour qu'il publie le rapport de test.","title":"1_cr\u00e9ation Dockerfile, m\u00eame repertoire que src : container qui execute le test pytest"},{"location":"guide_jenkins_docker_pytest/#2_creation-jenkinsdockerfile-container-qui-fait-tourner-jenkins","text":"ce dockerfile ne fait que cr\u00e9\u00e9 une image qui fait tourn\u00e9 jenkins et y installe un autre docker, le tout dans un debian !!! -qq ou -qqy sont des options de apt-get : -qq veut dire simplement en mode silencieux et y=yess FROM jenkins/jenkins:lts USER root RUN apt-get update -qq \\ && apt-get install -qqy apt-transport-https ca-certificates \\ curl gnupg2 software-properties-common RUN curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - RUN add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/debian \\ $(lsb_release -cs) stable\" RUN apt-get update -qq && apt-get install docker-ce=17.12.1~ce-0~debian -y creation de l'image nomm\u00e9e : jenkins_docker_image ------------------------------------------------- docker build -t jenkins_docker_image -f JenkinsDockerfile . lancement du container jenkins nomm\u00e9e jenkins_docker_container sur le port 8080 et avec un bind mounts ---------------------------------------------------------- docker run -d --name jenkins_docker_container -p 8080:8080 -v /var/run/docker.sock:/var/run/docker.sock jenkins_docker_image verification container: ----------------------- docker ps verification du docker install\u00e9 : ------------------------------- bakary@DESKTOP-337O3J7:/mnt/c/Users/Utilisateur/Desktop/bak_projet/2_docker_python_jenkins/python_docker_jenkins_git$ docker exec -ti jenkins_docker_container docker --version Docker version 17.12.1-ce, build 7390fc6 verification bind mounts: ----------------------- en local : (mydev1) bakary@DESKTOP-337O3J7:ls -l /var/run/ srw-rw---- 1 root docker 0 Aug 5 18:46 docker-cli.sock srw-rw---- 1 root docker 0 Aug 5 18:46 docker.sock dans le container: bakary@DESKTOP-337O3J7: docker exec -ti jenkins_docker_container ls -l /var/run/ srw-rw---- 1 root 1001 0 Aug 5 16:46 docker.sock drwxrwxrwt 2 root root 4096 Jul 21 00:00 lock lancement sur navigateur : -------------------------- Open http://localhost:8080/ copier le pasword obtenu avec : docker exec -ti jenkins_docker_container cat /var/jenkins_home/secrets/initialAdminPassword Installer les plugins sugg\u00e9r\u00e9s Configurer utilisateur : login=bakary mdp=bakary1234 Sauver et terminer l'installation ==> Jenkins fonctionne correctement","title":"2_cr\u00e9ation JenkinsDockerfile : container qui fait tourner Jenkins"},{"location":"guide_jenkins_docker_pytest/#partie-jenkins","text":"Click on create new jobs to create a new freestyle project of any name : jenkins pytest Under the General tab: ---------------------- mention the project description and specify the GitHub Project URL. In Source Code Management tab: ------------------------------ click on Git and add the repository URL. Enter the credentials by selecting Add->Jenkins and specifying the username and password of Git account. This step will copy the repository docker_python_git_jenkins from GitHub URL into /var/jenkins_home/workspace thereby creating the workspace inside our python-test-calculator directory (rappel Dockerfile COPY . /python-test-calculator \\ WORKDIR /python-test-calculator) Under Build tab: ---------------- click on Add build step->Execute shell and copy the following: IMAGE_NAME=\"test-image\" CONTAINER_NAME=\"test-container\" echo \"Check current working directory\" pwd echo \"Build docker image and run container\" docker build -t $IMAGE_NAME . ===> c'est le Dockerfile copi\u00e9 ici qui est lanc\u00e9 pour creer l'image docker run -d --name $CONTAINER_NAME $IMAGE_NAME ==> lancement container du pytest echo \"Copy result.xml into Jenkins container\" rm -rf reports; mkdir reports docker cp $CONTAINER_NAME:/python_docker_jenkins_git/reports/result.xml reports/ echo \"Cleanup\" docker stop $CONTAINER_NAME docker rm $CONTAINER_NAME docker rmi $IMAGE_NAME Etape pas encore decrite","title":"PARTIE JENKINS :"},{"location":"guide_jenkins_docker_pytest/#installation-plugins","text":"Installation du cli Command Line User Command line folks, download the jenkins-cli.jar file from your Jenkins Server. Syntax: wget $JENKINS_URL/jnlpJars/jenkins-cli.jar ##Example wget http://localhost:8080/jnlpJars/jenkins-cli.jar Get the plugin manager: version=1.0.1 curl \\ -L \\ -X GET \"https://github.com/jenkinsci/plugin-installation-manager-tool/releases/download/plugin-management-parent-pom-$version/jenkins-plugin-manager-$version.jar\" \\ -o jenkins-plugin-manager-$version.jar Download the plugins: java -jar jenkins-plugin-manager-$version.jar \\ --plugin-download-directory pluginsFolder \\ --plugin-file plugins.yml \\ --war jenkins.war The plugins are in the pluginsFolder. commande cli: USER=\"bakary\" PASSWORD=\"bakary1234\" java -jar jenkins-cli.jar -auth ${USER}:${PASSWORD} -s ${JENKINSURL} install-plugin ${PLUGIN_NAME}","title":"Installation plugins"}]}